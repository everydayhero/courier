input {
  cloudwatch_logs {
    log_group => "${LOG_GROUP_PREFIX}"
    log_group_prefix => true
    region => "${AWS_DEFAULT_REGION:us-east-1}"
    start_position => "end"
  }
}

filter {
  mutate {
    add_field => {
      "[@app][name]" => "unknown"
      "[@app][env]" => "unknown"
      "[@app][command]" => "unknown"
      "event_name" => "message"
    }
  }

  grok {
    match => {
      "message" => [
        "%{WORD:[@app][command]}:%{WORD:[@app][revision]}/%{WORD:container_id} %{GREEDYDATA:message}",
        "agent\:%{GREEDYDATA:agent}/%{GREEDYDATA:instance_id} %{WORD:event_name} %{WORD:[@app][command]} process %{WORD:container_id}%{SPACE}(via %{WORD:signal})?",
        "\[%{TIMESTAMP_ISO8601:timestamp}%{DATA}\]%{SPACE}%{LOGLEVEL:loglevel} %{PROG:program} : %{GREEDYDATA:message}"
      ]
      "[cloudwatch_logs][log_group]" => "%{WORD:[@app][env]}-%{USERNAME:[@app][name]}-LogGroup"
    }
    overwrite => [ "message", "[@app][name]", "[@app][env]", "[@app][command]", "event_name" ]
    break_on_match => false

    remove_field => [ "cloudwatch_logs" ]
  }

  date {
    match => [ "timestamp", "ISO8601" ]
    remove_field => [ "timestamp" ]
  }

  json {
    source => "message"
    target => "data"
    skip_on_invalid_json => true
  }

  kv {
    target => "data"
  }
}

output {
  logentries {
    token => "${LOGENTRIES_TOKEN}"
    host => "data.logentries.com"
    port => 443
    ssl_enable => true
    reconnect_interval => 10
  }

  statsd {
    host => "${STATSD_HOST}"
    port => "${STATSD_PORT:8125}"
    increment => [
      "%{[@app][env]}.%{[@app][name]}.%{[@app][command]}.stream"
    ]
    sender => "logstash"
    namespace => "%{NAMESPACE:logstash}"
  }
}
